#
# ps9pr4.py (Problem Set 9, Problem 4)
#
# AI Player for use in Connect Four  
#

import random  
from ps9pr3 import *

class AIPlayer(Player):
    """ AIPlayer will look ahead to moves in the future in order to create the best
    possible move for now """
    def __init__(self, checker, tiebreak, lookahead):
        """ constructs a new AIPlayer object """
        assert(checker == 'X' or checker == 'O')
        assert(tiebreak == 'LEFT' or tiebreak == 'RIGHT' or tiebreak == 'RANDOM')
        assert(lookahead >= 0)
        super().__init__(checker)
        self.tiebreak = tiebreak
        self.lookahead = lookahead

    def __repr__(self):
        """ returns a string representing an AIPlayer object """
        s = 'Player' + ' ' + str(self.checker) + ' '
        s += '(' + str(self.tiebreak) + ', ' + str(self.lookahead) + ')'
        return s

    def max_score_column(self, scores):
        """ takes a list, scores, containing a score for each olumn of the board,
        and that returns the index of the column with the maximum score """
        max_score = max(scores)
        scores1 = []
        for i in range(len(scores)):
            if scores[i] == max_score:
                scores1 += [i]
        if self.tiebreak == 'LEFT':
            return scores1[0]
        if self.tiebreak == 'RIGHT':
            return scores1[-1]
        if self.tiebreak == 'RANDOM':
            return random.choice(scores1)

    def scores_for(self, b):
        """ takes a board objet b and determines that called AIPlayer's scores for 
        the columns in b """ 
        scores = [50] * b.width
        for col in range(b.width):
            if b.can_add_to(col) == False:
                scores[col] = -1
            elif b.is_win_for(self.checker) == True:
                scores[col] = 100
            elif b.is_win_for(self.opponent_checker()) == True:
                scores[col] = 0
            elif self.lookahead == 0:
                scores[col] = 50
            else:
                b.add_checker(self.checker, col)
                opponent = AIPlayer(self.opponent_checker(), self.tiebreak, self.lookahead - 1)
                opp_scores = opponent.scores_for(b)
                if max(opp_scores) == 100:
                    scores[col] = 0
                elif max(opp_scores) == 0:
                    scores[col] = 100
                elif max(opp_scores) == 50:
                    scores[col] = 50
                b.remove_checker(col)
        return scores

    def next_move(self, b):
        """ AI makes the best possible move """
        self.num_moves += 1
        scores = self.scores_for(b)
        return self.max_score_column(scores)
     
